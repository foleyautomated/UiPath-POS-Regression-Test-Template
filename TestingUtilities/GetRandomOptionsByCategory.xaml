<Activity mc:Ignorable="sap sap2010" x:Class="GetRandomOptions" this:GetRandomOptions.in_ContinueOnError="False" this:GetRandomOptions.in_OptionCategory="Condiment" this:GetRandomOptions.in_AllowDuplicates="True" this:GetRandomOptions.in_DesiredNumberOfRandomOptions="2" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.ComponentModel;assembly=System.ComponentModel.TypeConverter" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:uasa="clr-namespace:UiPath.Activities.System.Arrays;assembly=UiPath.System.Activities" xmlns:uasc="clr-namespace:UiPath.Activities.System.Collections;assembly=UiPath.System.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_ContinueOnError" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_OptionCategory" Type="InArgument(x:String)" />
    <x:Property Name="in_AllowDuplicates" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_DesiredNumberOfRandomOptions" Type="InArgument(x:Int32)" />
    <x:Property Name="out_RandomOptions" Type="OutArgument(s:String[])" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>773,2437</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>UiPath.Activities.System.Arrays</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Activities.System.Collections</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="GetRandomOptions" sap:VirtualizedContainerService.HintSize="690,2372" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="XamlFileName">
        <Variable.Default>
          <Literal x:TypeArguments="x:String">GetRandomOptionsByCategory</Literal>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="s:DateTime" Name="StartedAt">
        <Variable.Default>
          <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">DateTime.Now</CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="s:String[]" Name="AllOptions" />
      <Variable x:TypeArguments="x:Int32" Name="OptionsCount" />
      <Variable x:TypeArguments="s:Random" Name="Rand" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="RandomOptions" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Start &lt;Action&gt; Step" sap:VirtualizedContainerService.HintSize="628,141" sap2010:WorkflowViewState.IdRef="LogMessage_1">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_8" xml:space="preserve">XamlFileName + ".xaml ----&gt; Start &lt;Action&gt; Step; " + 
"ContinueOnError:[" + in_ContinueOnError.ToString() + "]"</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:LogMessage>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="GetAllOptionsByCategory" sap:VirtualizedContainerService.HintSize="628,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="TestingUtilities\\GetAllOptionsByCategory.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_OptionCategory">
          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_10">in_OptionCategory</CSharpValue>
        </InArgument>
        <OutArgument x:TypeArguments="s:String[]" x:Key="out_AllOptions">
          <CSharpReference x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">AllOptions</CSharpReference>
        </OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <Assign DisplayName="Total Options" sap:VirtualizedContainerService.HintSize="628,82" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">
          <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_2">OptionsCount</CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">
          <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_12">AllOptions.Count()</CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Init Random" sap:VirtualizedContainerService.HintSize="628,82" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="s:Random">
          <CSharpReference x:TypeArguments="s:Random" sap2010:WorkflowViewState.IdRef="CSharpReference`1_3">Rand</CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:Random">
          <CSharpValue x:TypeArguments="s:Random" sap2010:WorkflowViewState.IdRef="CSharpValue`1_13">new System.Random()</CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Init Random Options" sap:VirtualizedContainerService.HintSize="628,82" sap2010:WorkflowViewState.IdRef="Assign_5">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:List(x:String)">
          <CSharpReference x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">RandomOptions</CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:List(x:String)">
          <CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_19">new List&lt;String&gt;()</CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <ui:IfElseIf DisplayName="Else If - Cannot Exceed Number Of Options Without Dupes" sap:VirtualizedContainerService.HintSize="628,286" sap2010:WorkflowViewState.IdRef="IfElseIf_1">
      <ui:IfElseIf.ConditionBlocks>
        <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
          <ui:IfElseIfBlock BlockType="If">
            <ui:IfElseIfBlock.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_14">in_DesiredNumberOfRandomOptions &gt; OptionsCount &amp;&amp; !in_AllowDuplicates</CSharpValue>
              </InArgument>
            </ui:IfElseIfBlock.Condition>
            <ui:IfElseIfBlock.Then>
              <Throw DisplayName="Throw - ArgumentException" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_3">
                <InArgument x:TypeArguments="s:Exception">
                  <CSharpValue x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpValue`1_17" xml:space="preserve">new ArgumentException(XamlFileName + ".xaml ==&gt; The DesiredNumberOfRandomOptions is [" + in_DesiredNumberOfRandomOptions.ToString() + "], " 
+ " but there are only [" + OptionsCount.ToString() + "] Total Options. "
+ "Please set in_AllowDuplicates=true if this is the desired behavior.")</CSharpValue>
                </InArgument>
              </Throw>
            </ui:IfElseIfBlock.Then>
          </ui:IfElseIfBlock>
        </sc:BindingList>
      </ui:IfElseIf.ConditionBlocks>
    </ui:IfElseIf>
    <ui:InterruptibleDoWhile CurrentIndex="{x:Null}" DisplayName="Do While - Building Random Options" sap:VirtualizedContainerService.HintSize="628,932" sap2010:WorkflowViewState.IdRef="InterruptibleDoWhile_1">
      <ui:InterruptibleDoWhile.Body>
        <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="594,796" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:String" Name="NextRandomOption" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign DisplayName="Next Random Index" sap:VirtualizedContainerService.HintSize="552,82" sap2010:WorkflowViewState.IdRef="Assign_4">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">NextRandomOption</CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_21">AllOptions[Rand.Next(AllOptions.Count())]</CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <uasa:AppendItemToList x:TypeArguments="x:String" ItemIndex="{x:Null}" DisplayName="Append Item to List" sap:VirtualizedContainerService.HintSize="552,133" sap2010:WorkflowViewState.IdRef="AppendItemToList`1_1">
            <uasa:AppendItemToList.ItemToAppend>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_23">NextRandomOption</CSharpValue>
              </InArgument>
            </uasa:AppendItemToList.ItemToAppend>
            <uasa:AppendItemToList.List>
              <InArgument x:TypeArguments="scg:IList(x:String)">
                <CSharpValue x:TypeArguments="scg:IList(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_22">RandomOptions</CSharpValue>
              </InArgument>
            </uasa:AppendItemToList.List>
          </uasa:AppendItemToList>
          <ui:IfElseIf DisplayName="Else If - Remove Added Items To Prevent Dupes" sap:VirtualizedContainerService.HintSize="552,413" sap2010:WorkflowViewState.IdRef="IfElseIf_2">
            <ui:IfElseIf.ConditionBlocks>
              <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
                <ui:IfElseIfBlock BlockType="If">
                  <ui:IfElseIfBlock.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_24">!in_AllowDuplicates</CSharpValue>
                    </InArgument>
                  </ui:IfElseIfBlock.Condition>
                  <ui:IfElseIfBlock.Then>
                    <uasc:RemoveFromCollection x:TypeArguments="x:String" Index="{x:Null}" DisplayName="Remove From Collection" sap:VirtualizedContainerService.HintSize="334,217" sap2010:WorkflowViewState.IdRef="RemoveFromCollection`1_1" RemoveAllElements="False">
                      <uasc:RemoveFromCollection.Collection>
                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                          <CSharpValue x:TypeArguments="scg:ICollection(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_20">AllOptions</CSharpValue>
                        </InArgument>
                      </uasc:RemoveFromCollection.Collection>
                      <uasc:RemoveFromCollection.Item>
                        <InArgument x:TypeArguments="x:String">
                          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_25">NextRandomOption</CSharpValue>
                        </InArgument>
                      </uasc:RemoveFromCollection.Item>
                    </uasc:RemoveFromCollection>
                  </ui:IfElseIfBlock.Then>
                </ui:IfElseIfBlock>
              </sc:BindingList>
            </ui:IfElseIf.ConditionBlocks>
          </ui:IfElseIf>
        </Sequence>
      </ui:InterruptibleDoWhile.Body>
      <ui:InterruptibleDoWhile.Condition>
        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_28">RandomOptions.Count() &lt; in_DesiredNumberOfRandomOptions</CSharpValue>
      </ui:InterruptibleDoWhile.Condition>
    </ui:InterruptibleDoWhile>
    <Assign DisplayName="Convert To Array Because that is what is used everywhere else" sap:VirtualizedContainerService.HintSize="628,82" sap2010:WorkflowViewState.IdRef="Assign_6">
      <Assign.To>
        <OutArgument x:TypeArguments="s:String[]">
          <CSharpReference x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_9">out_RandomOptions</CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:String[]">
          <CSharpValue x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_29">RandomOptions.ToArray()</CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <ui:LogMessage DisplayName="Log Finish &lt;Action&gt; Step" sap:VirtualizedContainerService.HintSize="628,141" sap2010:WorkflowViewState.IdRef="LogMessage_2">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_27" xml:space="preserve">XamlFileName + ".xaml ----&gt; Finish &lt;Action&gt; Step; " +
"[" + RandomOptions.Count().ToString() + "] Random Options Generated; " +
"("  + Math. Round((DateTime.Now - StartedAt).TotalMilliseconds/1000, 2).ToString() + " seconds)"</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:LogMessage>
  </Sequence>
</Activity>