<Activity mc:Ignorable="sap sap2010" x:Class="DetermineDemoState" this:DetermineDemoState.in_WaitUntilStateIsKnown="False" this:DetermineDemoState.in_TimeoutSeconds="5" this:DetermineDemoState.in_ContinueOnError="False" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.ComponentModel;assembly=System.ComponentModel.TypeConverter" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_WaitUntilStateIsKnown" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_TimeoutSeconds" Type="InArgument(x:Double)" />
    <x:Property Name="in_ContinueOnError" Type="InArgument(x:Boolean)" />
    <x:Property Name="io_ValidationElementsByStateName" Type="InOutArgument(scg:Dictionary(x:String, ui:UiElement))" />
    <x:Property Name="io_StatesByName" Type="InOutArgument(scg:Dictionary(x:String, x:Boolean))" />
  </x:Members>
  <sap2010:Annotation.AnnotationText>UPTF00000088eyI8SGVscExpbms+a19fQmFja2luZ0ZpZWxkIjpudWxsLCI8SW5pdGlhbFRvb2x0aXA+a19fQmFja2luZ0ZpZWxkIjpudWxsLCI8VmVyc2lvbj5rX19CYWNraW5nRmllbGQiOjF9</sap2010:Annotation.AnnotationText>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>896,1839</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Collections.Specialized</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>Template.POS.Core</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.Collections.Specialized</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="DetermineDemoState" sap:VirtualizedContainerService.HintSize="513,1774" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Default="DetermineState" Name="XamlFileNameWithoutExtension" />
      <Variable x:TypeArguments="s:DateTime" Name="StartedAt">
        <Variable.Default>
          <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_3">DateTime.Now</CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="s:DateTime" Name="TimeoutAt">
        <Variable.Default>
          <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_12">DateTime.Now + TimeSpan.FromSeconds(in_TimeoutSeconds)</CSharpValue>
        </Variable.Default>
      </Variable>
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Start" sap:VirtualizedContainerService.HintSize="451,141" sap2010:WorkflowViewState.IdRef="LogMessage_3">
      <ui:LogMessage.Level>
        <InArgument x:TypeArguments="ui:LogLevel">
          <CSharpValue x:TypeArguments="ui:LogLevel" sap2010:WorkflowViewState.IdRef="CSharpValue`1_5">UiPath.Core.Activities.LogLevel.Info</CSharpValue>
        </InArgument>
      </ui:LogMessage.Level>
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_4">XamlFileNameWithoutExtension + " --&gt; Determining State..."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <Assign DisplayName="Reset io_State" sap:VirtualizedContainerService.HintSize="451,82" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Boolean)">
          <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_6">io_StatesByName</CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Boolean)">
          <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_8">new Dictionary&lt;string, Boolean&gt;()</CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <ui:InterruptibleDoWhile CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="TODO: Add A Series of &quot;State&quot; Workflows, For Each:&#xA;- Set in_TimeoutSeconds=0&#xA;- Set each io_State argument to = 'io_State'" DisplayName="Do While - Checking States" sap:VirtualizedContainerService.HintSize="451,853" sap2010:WorkflowViewState.IdRef="InterruptibleDoWhile_1">
      <ui:InterruptibleDoWhile.Body>
        <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="376,660" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="IsClosed" sap:VirtualizedContainerService.HintSize="334,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="_Demo\\GotoReady\\States\\IsClosed.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:Double" x:Key="in_TimeoutSeconds">0</InArgument>
              <InArgument x:TypeArguments="x:Boolean" x:Key="in_ContinueOnError">True</InArgument>
              <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" x:Key="io_StatesByName">
                <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">io_StatesByName</CSharpReference>
              </InOutArgument>
              <InOutArgument x:TypeArguments="scg:Dictionary(x:String, ui:UiElement)" x:Key="io_ValidationElementsByStateName">
                <CSharpReference x:TypeArguments="scg:Dictionary(x:String, ui:UiElement)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">io_ValidationElementsByStateName</CSharpReference>
              </InOutArgument>
              <OutArgument x:TypeArguments="x:Boolean" x:Key="out_IsClosed" />
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="IsOnFloatingLogoScreen" sap:VirtualizedContainerService.HintSize="334,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="_Demo\\GotoReady\\States\\IsOnFloatingLogoScreen.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:Double" x:Key="in_TimeoutSeconds">0</InArgument>
              <InArgument x:TypeArguments="x:Boolean" x:Key="in_ContinueOnError">True</InArgument>
              <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" x:Key="io_StatesByName">
                <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_10">io_StatesByName</CSharpReference>
              </InOutArgument>
              <InOutArgument x:TypeArguments="scg:Dictionary(x:String, ui:UiElement)" x:Key="io_ValidationElementsByStateName">
                <CSharpReference x:TypeArguments="scg:Dictionary(x:String, ui:UiElement)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_9">io_ValidationElementsByStateName</CSharpReference>
              </InOutArgument>
              <OutArgument x:TypeArguments="x:Boolean" x:Key="out_IsOnFloatingLogoScreen" />
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="IsOnHomeScreen" sap:VirtualizedContainerService.HintSize="334,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" UnSafe="False" WorkflowFileName="_Demo\\GotoReady\\States\\IsOnHomeScreen.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:Double" x:Key="in_TimeoutSeconds">0</InArgument>
              <InArgument x:TypeArguments="x:Boolean" x:Key="in_ContinueOnError">True</InArgument>
              <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" x:Key="io_StatesByName">
                <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_12">io_StatesByName</CSharpReference>
              </InOutArgument>
              <InOutArgument x:TypeArguments="scg:Dictionary(x:String, ui:UiElement)" x:Key="io_ValidationElementsByStateName">
                <CSharpReference x:TypeArguments="scg:Dictionary(x:String, ui:UiElement)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_11">io_ValidationElementsByStateName</CSharpReference>
              </InOutArgument>
              <OutArgument x:TypeArguments="x:Boolean" x:Key="out_IsOnHomeScreen" />
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="IsOnPinPadScreen" sap:VirtualizedContainerService.HintSize="334,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="_Demo\\GotoReady\\States\\IsOnPinPadScreen.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:Double" x:Key="in_TimeoutSeconds">
                <Literal x:TypeArguments="x:Double" />
              </InArgument>
              <InArgument x:TypeArguments="x:Boolean" x:Key="in_ContinueOnError">
                <Literal x:TypeArguments="x:Boolean" Value="True" />
              </InArgument>
              <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" x:Key="io_StatesByName">
                <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:Boolean)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_14">io_StatesByName</CSharpReference>
              </InOutArgument>
              <InOutArgument x:TypeArguments="scg:Dictionary(x:String, ui:UiElement)" x:Key="io_ValidationElementsByStateName">
                <CSharpReference x:TypeArguments="scg:Dictionary(x:String, ui:UiElement)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_13">io_ValidationElementsByStateName</CSharpReference>
              </InOutArgument>
              <OutArgument x:TypeArguments="x:Boolean" x:Key="out_IsOnPinPadScreen" />
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
        </Sequence>
      </ui:InterruptibleDoWhile.Body>
      <ui:InterruptibleDoWhile.Condition>
        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_24" xml:space="preserve">!(
	io_StatesByName.Values.Any()
	||
	DateTime.Now &gt; TimeoutAt
	||
	in_WaitUntilStateIsKnown
)</CSharpValue>
      </ui:InterruptibleDoWhile.Condition>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InterruptibleDoWhile>
    <ui:IfElseIf DisplayName="Else if - Throw Timeout Exception?" sap:VirtualizedContainerService.HintSize="451,286" sap2010:WorkflowViewState.IdRef="IfElseIf_1">
      <ui:IfElseIf.ConditionBlocks>
        <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
          <ui:IfElseIfBlock BlockType="If">
            <ui:IfElseIfBlock.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_25">DateTime.Now &gt; TimeoutAt &amp;&amp; !in_ContinueOnError &amp;&amp; in_WaitUntilStateIsKnown</CSharpValue>
              </InArgument>
            </ui:IfElseIfBlock.Condition>
            <ui:IfElseIfBlock.Then>
              <Throw DisplayName="Throw - Timeout Exception" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_1">
                <InArgument x:TypeArguments="s:Exception">
                  <CSharpValue x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpValue`1_14">new TimeoutException(XamlFileNameWithoutExtension + " ==&gt; Timeout after (" + in_TimeoutSeconds.ToString() + " seconds); Unable to determine state. ")</CSharpValue>
                </InArgument>
              </Throw>
            </ui:IfElseIfBlock.Then>
          </ui:IfElseIfBlock>
        </sc:BindingList>
      </ui:IfElseIf.ConditionBlocks>
    </ui:IfElseIf>
    <ui:LogMessage DisplayName="Log Finish + Duration + Dictionary" sap:VirtualizedContainerService.HintSize="451,141" sap2010:WorkflowViewState.IdRef="LogMessage_4">
      <ui:LogMessage.Level>
        <InArgument x:TypeArguments="ui:LogLevel">
          <CSharpValue x:TypeArguments="ui:LogLevel" sap2010:WorkflowViewState.IdRef="CSharpValue`1_7">UiPath.Core.Activities.LogLevel.Info</CSharpValue>
        </InArgument>
      </ui:LogMessage.Level>
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_28" xml:space="preserve">XamlFileNameWithoutExtension + " --&gt; Finish &lt;DetermineState&gt; Capability: " + 
"{" + string.Join(",",  io_StatesByName.Select(kvp =&gt; "\"" + kvp.Key + "\":" + kvp.Value)) + "}" +
"("  + Math. Round((DateTime.Now - StartedAt).TotalMilliseconds/1000, 2).ToString() + " seconds)"</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
  </Sequence>
</Activity>